{"version":3,"sources":["ng://ngx-markdown-editor/lib/md-editor.component.ts","ng://ngx-markdown-editor/public_api.ts"],"names":["MarkdownEditorComponent","required","maxlength","_renderer","_domSanitizer","this","hideToolbar","height","_options","hideIcons","showPreviewPanel","isFullScreen","_defaultOption","showBorder","scrollPastEnd","enablePreviewContentClick","_onChange","_","_onTouched","Object","defineProperty","prototype","_mode","value","toLowerCase","_this","assign","forEach","v","_markdownValue","preRender","Function","undefined","_renderMarkTimeout","clearTimeout","setTimeout","html","marked","_markedOpt","previewHtml","bypassSecurityTrustHtml","ngOnInit","markedRender","Renderer","code","language","hljs","getLanguage","highlight","table","header","body","listitem","text","test","replace","renderer","highlightAuto","ngAfterViewInit","editorElement","aceEditorContainer","nativeElement","_editor","ace","edit","$blockScrolling","Infinity","getSession","setUseWrapMode","setMode","setValue","markdownValue","setOption","on","e","val","getValue","ngOnDestroy","destroy","writeValue","registerOnChange","fn","registerOnTouched","validate","c","result","length","insertContent","type","selectedText","getSelectedText","isSelected","startSize","initText","range","selection","getRange","session","start","column","end","setRange","focus","togglePreview","editorResize","previewPanelClick","event","options","preventDefault","stopImmediatePropagation","fullScreen","setElementStyle","document","timeOut","resize","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","Attribute","DomSanitizer","ViewChild","Input","LMarkdownEditorModule","NgModule","declarations","imports","CommonModule","FormsModule","exports"],"mappings":"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","sourcesContent":["import { Component, ViewChild, forwardRef, Renderer, Attribute, Input, ElementRef } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, NG_VALIDATORS, Validator, AbstractControl, ValidationErrors } from '@angular/forms';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { MdEditorOption } from './md-editor.types';\r\n\r\ndeclare let ace: any;\r\ndeclare let marked: any;\r\ndeclare let hljs: any;\r\n\r\n@Component({\r\n  selector: 'md-editor',\r\n  styleUrls: ['./md-editor.css'],\r\n  templateUrl: './md-editor.html',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MarkdownEditorComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => MarkdownEditorComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\n\r\nexport class MarkdownEditorComponent implements ControlValueAccessor, Validator {\r\n\r\n  @ViewChild('aceEditor') public aceEditorContainer: ElementRef;\r\n  @Input() public hideToolbar: boolean = false;\r\n  @Input() public height: string = \"300px\";\r\n  @Input() public preRender: Function;\r\n\r\n  @Input()\r\n  public get mode(): string {\r\n    return this._mode || 'editor';\r\n  }\r\n  public set mode(value: string) {\r\n    if (!value || (value.toLowerCase() !== 'editor' && value.toLowerCase() !== 'preview')) {\r\n      value = 'editor';\r\n    }\r\n    this._mode = value;\r\n  }\r\n  private _mode: string;\r\n\r\n  @Input()\r\n  public get options(): MdEditorOption {\r\n    return this._options;\r\n  }\r\n  public set options(value: MdEditorOption) {\r\n    this._options = Object.assign(this._defaultOption, {}, value);\r\n    this.hideIcons = {};\r\n    if (this._options.hideIcons) {\r\n      this._options.hideIcons.forEach((v: any) => this.hideIcons[v] = true);\r\n    }\r\n  }\r\n  private _options: any = {};\r\n\r\n  public hideIcons: any = {};\r\n  public showPreviewPanel: boolean = true;\r\n  public isFullScreen: boolean = false;\r\n  public previewHtml: any;\r\n\r\n  public get markdownValue(): any {\r\n    return this._markdownValue || '';\r\n  }\r\n  public set markdownValue(value: any) {\r\n    this._markdownValue = value;\r\n    this._onChange(value);\r\n\r\n    if (this.preRender && this.preRender instanceof Function) {\r\n      value = this.preRender(value);\r\n    }\r\n    if (value !== null && value !== undefined) {\r\n      if (this._renderMarkTimeout) clearTimeout(this._renderMarkTimeout);\r\n      this._renderMarkTimeout = setTimeout(() => {\r\n        let html = marked(value || '', this._markedOpt);\r\n        this.previewHtml = this._domSanitizer.bypassSecurityTrustHtml(html);\r\n      }, 100);\r\n    }\r\n  }\r\n  private _markdownValue: any;\r\n\r\n  private _editor: any;\r\n  private _renderMarkTimeout: any;\r\n  private _markedOpt: any;\r\n  private _defaultOption: MdEditorOption = {\r\n    showBorder: true,\r\n    hideIcons: [],\r\n    scrollPastEnd: 0,\r\n    enablePreviewContentClick: false\r\n  };\r\n  private _onChange = (_: any) => { };\r\n  private _onTouched = () => { };\r\n\r\n  constructor(\r\n    @Attribute('required') public required: boolean = false,\r\n    @Attribute('maxlength') public maxlength: number = -1,\r\n    private _renderer: Renderer,\r\n    private _domSanitizer: DomSanitizer) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    let markedRender = new marked.Renderer();\r\n    markedRender.code = (code: any, language: any) => {\r\n      let validLang = !!(language && hljs.getLanguage(language));\r\n      let highlighted = validLang ? hljs.highlight(language, code).value : code;\r\n      return `<pre style=\"padding: 0; border-radius: 0;\"><code class=\"hljs ${language}\">${highlighted}</code></pre>`;\r\n    };\r\n    markedRender.table = (header: string, body: string) => {\r\n      return `<table class=\"table table-bordered\">\\n<thead>\\n${header}</thead>\\n<tbody>\\n${body}</tbody>\\n</table>\\n`;\r\n    };\r\n\r\n    markedRender.listitem = (text: any) => {\r\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\r\n        text = text\r\n          .replace(/^\\s*\\[ \\]\\s*/, '<i class=\"fa fa-square-o\" style=\"margin: 0 0.2em 0.25em -1.6em;\"></i> ')\r\n          .replace(/^\\s*\\[x\\]\\s*/, '<i class=\"fa fa-check-square\" style=\"margin: 0 0.2em 0.25em -1.6em;\"></i> ');\r\n        return `<li style=\"list-style: none;\">${text}</li>`;\r\n      } else {\r\n        return `<li>${text}</li>`;\r\n      }\r\n    };\r\n\r\n    this._markedOpt = {\r\n      renderer: markedRender,\r\n      highlight: (code: any) => hljs.highlightAuto(code).value\r\n    };\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    let editorElement = this.aceEditorContainer.nativeElement;\r\n    this._editor = ace.edit(editorElement);\r\n    this._editor.$blockScrolling = Infinity;\r\n    this._editor.getSession().setUseWrapMode(true);\r\n    this._editor.getSession().setMode(\"ace/mode/markdown\");\r\n    this._editor.setValue(this.markdownValue || '', 1);\r\n    this._editor.setOption('scrollPastEnd', this._options.scrollPastEnd || 0);\r\n\r\n    this._editor.on(\"change\", (e: any) => {\r\n      let val = this._editor.getValue();\r\n      this.markdownValue = val;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._editor && this._editor.destroy();\r\n  }\r\n\r\n  writeValue(value: any | Array<any>): void {\r\n    setTimeout(() => {\r\n      this.markdownValue = value;\r\n      if (typeof value !== 'undefined' && this._editor) {\r\n        this._editor.setValue(value || '', 1);        \r\n      }\r\n    }, 1);\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => {}): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  validate(c: AbstractControl): ValidationErrors {\r\n    let result: any = null;\r\n    if (this.required && this.markdownValue.length === 0) {\r\n      result = { required: true };\r\n    }\r\n    if (this.maxlength > 0 && this.markdownValue.length > this.maxlength) {\r\n      result = { maxlength: true };\r\n    }\r\n    return result;\r\n  }\r\n\r\n  insertContent(type: string) {\r\n    if (!this._editor) return;\r\n    let selectedText = this._editor.getSelectedText();\r\n    let isSelected = !!selectedText;\r\n    let startSize = 2;\r\n    let initText: string = '';\r\n    let range = this._editor.selection.getRange();\r\n    switch (type) {\r\n      case 'Bold':\r\n        initText = 'Bold Text';\r\n        selectedText = `**${selectedText || initText}**`;\r\n        break;\r\n      case 'Italic':\r\n        initText = 'Italic Text';\r\n        selectedText = `*${selectedText || initText}*`;\r\n        startSize = 1;\r\n        break;\r\n      case 'Heading':\r\n        initText = 'Heading';\r\n        selectedText = `# ${selectedText || initText}`;\r\n        break;\r\n      case 'Refrence':\r\n        initText = 'Refrence';\r\n        selectedText = `> ${selectedText || initText}`;\r\n        break;\r\n      case 'Link':\r\n        selectedText = `[](http://)`;\r\n        startSize = 1;\r\n        break;\r\n      case 'Image':\r\n        selectedText = `![](http://)`;\r\n        break;\r\n      case 'Ul':\r\n        selectedText = `- ${selectedText || initText}`\r\n        break;\r\n      case 'Ol':\r\n        selectedText = `1. ${selectedText || initText}`\r\n        startSize = 3;\r\n        break;\r\n      case 'Code':\r\n        initText = 'Source Code';\r\n        selectedText = \"```language\\r\\n\" + (selectedText || initText) + \"\\r\\n```\";\r\n        startSize = 3;\r\n        break;\r\n    }\r\n    this._editor.session.replace(range, selectedText);\r\n    if (!isSelected) {\r\n      range.start.column += startSize;\r\n      range.end.column = range.start.column + initText.length;\r\n      this._editor.selection.setRange(range);\r\n    }\r\n    this._editor.focus();\r\n  }\r\n\r\n  togglePreview() {\r\n    this.showPreviewPanel = !this.showPreviewPanel;\r\n    this.editorResize();\r\n  }\r\n\r\n  previewPanelClick(event: Event) {\r\n    if (this.options.enablePreviewContentClick !== true) {\r\n      event.preventDefault();\r\n      event.stopImmediatePropagation();\r\n    }\r\n  }\r\n\r\n  fullScreen() {\r\n    this.isFullScreen = !this.isFullScreen;\r\n    this._renderer.setElementStyle(document.body, 'overflowY', this.isFullScreen ? 'hidden' : 'auto');\r\n    this.editorResize();\r\n  }\r\n\r\n  editorResize(timeOut: number = 100) {\r\n    if (this._editor) {\r\n      setTimeout(() => {\r\n        this._editor.resize();\r\n        this._editor.focus();\r\n      }, timeOut);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { MarkdownEditorComponent } from './lib/md-editor.component';\r\n\r\nexport { MarkdownEditorComponent } from './lib/md-editor.component';\r\nexport { MdEditorOption } from './lib/md-editor.types';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MarkdownEditorComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  exports: [\r\n    MarkdownEditorComponent\r\n  ]\r\n})\r\nexport class LMarkdownEditorModule { }\r\n"]}