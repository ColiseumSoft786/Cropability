(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/platform-browser'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-markdown-editor', ['exports', '@angular/core', '@angular/forms', '@angular/platform-browser', '@angular/common'], factory) :
    (factory((global['ngx-markdown-editor'] = {}),global.ng.core,global.ng.forms,global.ng.platformBrowser,global.ng.common));
}(this, (function (exports,core,forms,platformBrowser,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MarkdownEditorComponent = /** @class */ (function () {
        function MarkdownEditorComponent(required, maxlength, _renderer, _domSanitizer) {
            if (required === void 0) {
                required = false;
            }
            if (maxlength === void 0) {
                maxlength = -1;
            }
            this.required = required;
            this.maxlength = maxlength;
            this._renderer = _renderer;
            this._domSanitizer = _domSanitizer;
            this.hideToolbar = false;
            this.height = "300px";
            this._options = {};
            this.hideIcons = {};
            this.showPreviewPanel = true;
            this.isFullScreen = false;
            this._defaultOption = {
                showBorder: true,
                hideIcons: [],
                scrollPastEnd: 0,
                enablePreviewContentClick: false
            };
            this._onChange = function (_) { };
            this._onTouched = function () { };
        }
        Object.defineProperty(MarkdownEditorComponent.prototype, "mode", {
            get: /**
             * @return {?}
             */ function () {
                return this._mode || 'editor';
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (!value || (value.toLowerCase() !== 'editor' && value.toLowerCase() !== 'preview')) {
                    value = 'editor';
                }
                this._mode = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MarkdownEditorComponent.prototype, "options", {
            get: /**
             * @return {?}
             */ function () {
                return this._options;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                var _this = this;
                this._options = Object.assign(this._defaultOption, {}, value);
                this.hideIcons = {};
                if (this._options.hideIcons) {
                    this._options.hideIcons.forEach(function (v) { return _this.hideIcons[v] = true; });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MarkdownEditorComponent.prototype, "markdownValue", {
            get: /**
             * @return {?}
             */ function () {
                return this._markdownValue || '';
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                var _this = this;
                this._markdownValue = value;
                this._onChange(value);
                if (this.preRender && this.preRender instanceof Function) {
                    value = this.preRender(value);
                }
                if (value !== null && value !== undefined) {
                    if (this._renderMarkTimeout)
                        clearTimeout(this._renderMarkTimeout);
                    this._renderMarkTimeout = setTimeout(function () {
                        /** @type {?} */
                        var html = marked(value || '', _this._markedOpt);
                        _this.previewHtml = _this._domSanitizer.bypassSecurityTrustHtml(html);
                    }, 100);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MarkdownEditorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var markedRender = new marked.Renderer();
                markedRender.code = function (code, language) {
                    /** @type {?} */
                    var validLang = !!(language && hljs.getLanguage(language));
                    /** @type {?} */
                    var highlighted = validLang ? hljs.highlight(language, code).value : code;
                    return "<pre style=\"padding: 0; border-radius: 0;\"><code class=\"hljs " + language + "\">" + highlighted + "</code></pre>";
                };
                markedRender.table = function (header, body) {
                    return "<table class=\"table table-bordered\">\n<thead>\n" + header + "</thead>\n<tbody>\n" + body + "</tbody>\n</table>\n";
                };
                markedRender.listitem = function (text) {
                    if (/^\s*\[[x ]\]\s*/.test(text)) {
                        text = text
                            .replace(/^\s*\[ \]\s*/, '<i class="fa fa-square-o" style="margin: 0 0.2em 0.25em -1.6em;"></i> ')
                            .replace(/^\s*\[x\]\s*/, '<i class="fa fa-check-square" style="margin: 0 0.2em 0.25em -1.6em;"></i> ');
                        return "<li style=\"list-style: none;\">" + text + "</li>";
                    }
                    else {
                        return "<li>" + text + "</li>";
                    }
                };
                this._markedOpt = {
                    renderer: markedRender,
                    highlight: function (code) { return hljs.highlightAuto(code).value; }
                };
            };
        /**
         * @return {?}
         */
        MarkdownEditorComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var editorElement = this.aceEditorContainer.nativeElement;
                this._editor = ace.edit(editorElement);
                this._editor.$blockScrolling = Infinity;
                this._editor.getSession().setUseWrapMode(true);
                this._editor.getSession().setMode("ace/mode/markdown");
                this._editor.setValue(this.markdownValue || '', 1);
                this._editor.setOption('scrollPastEnd', this._options.scrollPastEnd || 0);
                this._editor.on("change", function (e) {
                    /** @type {?} */
                    var val = _this._editor.getValue();
                    _this.markdownValue = val;
                });
            };
        /**
         * @return {?}
         */
        MarkdownEditorComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._editor && this._editor.destroy();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        MarkdownEditorComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                setTimeout(function () {
                    _this.markdownValue = value;
                    if (typeof value !== 'undefined' && _this._editor) {
                        _this._editor.setValue(value || '', 1);
                    }
                }, 1);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        MarkdownEditorComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        MarkdownEditorComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onTouched = fn;
            };
        /**
         * @param {?} c
         * @return {?}
         */
        MarkdownEditorComponent.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                /** @type {?} */
                var result = null;
                if (this.required && this.markdownValue.length === 0) {
                    result = { required: true };
                }
                if (this.maxlength > 0 && this.markdownValue.length > this.maxlength) {
                    result = { maxlength: true };
                }
                return result;
            };
        /**
         * @param {?} type
         * @return {?}
         */
        MarkdownEditorComponent.prototype.insertContent = /**
         * @param {?} type
         * @return {?}
         */
            function (type) {
                if (!this._editor)
                    return;
                /** @type {?} */
                var selectedText = this._editor.getSelectedText();
                /** @type {?} */
                var isSelected = !!selectedText;
                /** @type {?} */
                var startSize = 2;
                /** @type {?} */
                var initText = '';
                /** @type {?} */
                var range = this._editor.selection.getRange();
                switch (type) {
                    case 'Bold':
                        initText = 'Bold Text';
                        selectedText = "**" + (selectedText || initText) + "**";
                        break;
                    case 'Italic':
                        initText = 'Italic Text';
                        selectedText = "*" + (selectedText || initText) + "*";
                        startSize = 1;
                        break;
                    case 'Heading':
                        initText = 'Heading';
                        selectedText = "# " + (selectedText || initText);
                        break;
                    case 'Refrence':
                        initText = 'Refrence';
                        selectedText = "> " + (selectedText || initText);
                        break;
                    case 'Link':
                        selectedText = "[](http://)";
                        startSize = 1;
                        break;
                    case 'Image':
                        selectedText = "![](http://)";
                        break;
                    case 'Ul':
                        selectedText = "- " + (selectedText || initText);
                        break;
                    case 'Ol':
                        selectedText = "1. " + (selectedText || initText);
                        startSize = 3;
                        break;
                    case 'Code':
                        initText = 'Source Code';
                        selectedText = "```language\r\n" + (selectedText || initText) + "\r\n```";
                        startSize = 3;
                        break;
                }
                this._editor.session.replace(range, selectedText);
                if (!isSelected) {
                    range.start.column += startSize;
                    range.end.column = range.start.column + initText.length;
                    this._editor.selection.setRange(range);
                }
                this._editor.focus();
            };
        /**
         * @return {?}
         */
        MarkdownEditorComponent.prototype.togglePreview = /**
         * @return {?}
         */
            function () {
                this.showPreviewPanel = !this.showPreviewPanel;
                this.editorResize();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        MarkdownEditorComponent.prototype.previewPanelClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.options.enablePreviewContentClick !== true) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
            };
        /**
         * @return {?}
         */
        MarkdownEditorComponent.prototype.fullScreen = /**
         * @return {?}
         */
            function () {
                this.isFullScreen = !this.isFullScreen;
                this._renderer.setElementStyle(document.body, 'overflowY', this.isFullScreen ? 'hidden' : 'auto');
                this.editorResize();
            };
        /**
         * @param {?=} timeOut
         * @return {?}
         */
        MarkdownEditorComponent.prototype.editorResize = /**
         * @param {?=} timeOut
         * @return {?}
         */
            function (timeOut) {
                var _this = this;
                if (timeOut === void 0) {
                    timeOut = 100;
                }
                if (this._editor) {
                    setTimeout(function () {
                        _this._editor.resize();
                        _this._editor.focus();
                    }, timeOut);
                }
            };
        MarkdownEditorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'md-editor',
                        template: "<div class=\"md-editor-container\" [class.fullscreen]=\"isFullScreen\">\r\n  <div class=\"tool-bar\" *ngIf=\"!hideToolbar && mode != 'preview'\">\r\n    <div class=\"btn-group\">\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Bold\" (click)=\"insertContent('Bold')\" *ngIf=\"!hideIcons.Bold\">\r\n        <i class=\"fa fa-bold\"></i>\r\n      </button>\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Italic\" (click)=\"insertContent('Italic')\" *ngIf=\"!hideIcons.Italic\">\r\n        <i class=\"fa fa-italic\"></i>\r\n      </button>\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Heading\" (click)=\"insertContent('Heading')\" *ngIf=\"!hideIcons.Heading\">\r\n        <i class=\"fa fa-header\"></i>\r\n      </button>\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Refrence\" (click)=\"insertContent('Refrence')\" *ngIf=\"!hideIcons.Refrence\">\r\n        <i class=\"fa fa-quote-left\"></i>\r\n      </button>\r\n    </div>\r\n    <div class=\"btn-group\">\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Link\" (click)=\"insertContent('Link')\" *ngIf=\"!hideIcons.Link\">\r\n        <i class=\"fa fa-link\"></i>\r\n      </button>\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Image\" (click)=\"insertContent('Image')\" *ngIf=\"!hideIcons.Image\">\r\n        <i class=\"fa fa-image\"></i>\r\n      </button>\r\n    </div>\r\n    <div class=\"btn-group\">\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Unordered List\" (click)=\"insertContent('Ul')\" *ngIf=\"!hideIcons.Ul\">\r\n        <i class=\"fa fa-list-ul\"></i>\r\n      </button>\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Ordered List\" (click)=\"insertContent('Ol')\" *ngIf=\"!hideIcons.Ol\">\r\n        <i class=\"fa fa-list-ol\"></i>\r\n      </button>\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Code Block\" (click)=\"insertContent('Code')\" *ngIf=\"!hideIcons.Code\">\r\n        <i class=\"fa fa-file-code-o\"></i>\r\n      </button>\r\n    </div>\r\n    <div class=\"btn-group\">\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"showPreviewPanel ? 'Hide Preview' : 'Show Preview'\" (click)=\"togglePreview()\"\r\n        *ngIf=\"!hideIcons.TogglePreview\">\r\n        <i class=\"fa\" [class.fa-eye]=\"!showPreviewPanel\" [class.fa-eye-slash]=\"showPreviewPanel\"></i>\r\n      </button>\r\n    </div>\r\n    <div class=\"btn-group pull-right hide-split\">\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" [class.active]=\"isFullScreen\" (click)=\"fullScreen()\" *ngIf=\"!hideIcons.FullScreen\">\r\n        <i class=\"fa fa-arrows-alt\"></i>\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <div class=\"editor-container\">\r\n    <div [style.display]=\"mode == 'preview' ? 'none' : null\">\r\n      <div class=\"editor-panel\" [style.height]=\"height\">\r\n        <div class=\"ace-editor\" #aceEditor></div>\r\n      </div>\r\n    </div>\r\n    <div [style.display]=\"showPreviewPanel ? 'block' : 'none'\" (click)=\"previewPanelClick($event)\">\r\n      <div class=\"preview-panel\" [innerHtml]=\"previewHtml\" [style.height]=\"height\"></div>\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"maxlength > 0 && mode != 'preview'\">\r\n    <div class=\"text-right md-footer\">\r\n      {{ markdownValue?.length }} / {{ maxlength }}\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return MarkdownEditorComponent; }),
                                multi: true
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef(function () { return MarkdownEditorComponent; }),
                                multi: true
                            }
                        ],
                        styles: [".md-editor-container{margin-bottom:15px;border:1px solid rgba(0,0,0,.1)}.md-editor-container.fullscreen{margin:0;position:fixed;border:0;top:0;left:0;width:100%;height:100%;z-index:99999999}.md-editor-container.fullscreen .editor-panel,.md-editor-container.fullscreen .preview-panel{height:calc(100vh - 40px)!important}.md-editor-container .ace-editor{height:100%}.md-editor-container .tool-bar{background-color:#f5f5f5;border-bottom:1px solid rgba(0,0,0,.1)}.md-editor-container .tool-bar .btn-group{padding:6px}.md-editor-container .tool-bar .btn-group>.btn:first-child::before{content:' ';background-color:#a9a9a9;width:1px;height:24px;left:-9px;top:2px;position:absolute}.md-editor-container .tool-bar .btn-group.hide-split>.btn:first-child::before,.md-editor-container .tool-bar .btn-group:first-child>.btn:first-child::before{display:none}.md-editor-container .tool-bar .btn{margin-bottom:0}.md-editor-container .editor-container{display:flex}.md-editor-container .editor-container>div{flex:1}.md-editor-container .preview-panel{border-left:1px solid rgba(0,0,0,.1);background-color:#fff;padding:10px;overflow-y:auto}.md-editor-container .md-footer{padding:2px;background-color:#f0f0f0;font-size:12px;border-top:1px solid rgba(0,0,0,.1)}"]
                    }] }
        ];
        /** @nocollapse */
        MarkdownEditorComponent.ctorParameters = function () {
            return [
                { type: Boolean, decorators: [{ type: core.Attribute, args: ['required',] }] },
                { type: Number, decorators: [{ type: core.Attribute, args: ['maxlength',] }] },
                { type: core.Renderer },
                { type: platformBrowser.DomSanitizer }
            ];
        };
        MarkdownEditorComponent.propDecorators = {
            aceEditorContainer: [{ type: core.ViewChild, args: ['aceEditor',] }],
            hideToolbar: [{ type: core.Input }],
            height: [{ type: core.Input }],
            preRender: [{ type: core.Input }],
            mode: [{ type: core.Input }],
            options: [{ type: core.Input }]
        };
        return MarkdownEditorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LMarkdownEditorModule = /** @class */ (function () {
        function LMarkdownEditorModule() {
        }
        LMarkdownEditorModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MarkdownEditorComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule
                        ],
                        exports: [
                            MarkdownEditorComponent
                        ]
                    },] }
        ];
        return LMarkdownEditorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.MarkdownEditorComponent = MarkdownEditorComponent;
    exports.LMarkdownEditorModule = LMarkdownEditorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,